INCLUDE 'NICA_Gold';

PROCEDURE MCMCALC ALPHA0 ALPHA1;
      VARIABLE TMPALPHA 100;
      VARIABLE I 1;
      VARIABLE MCM0 1;
      VARIABLE MCM1 1;
      VARIABLE MCM2 1;
      VARIABLE MCM3 1;
      VARIABLE MCM4 1;

      {L0:=183.4720631502572;}

      MCM MAP SPOS TMPALPHA;
      MCM0 := -TMPALPHA|(0&0&0&0&0&0);
      MCM1 := -TMPALPHA|(0&0&0&0&0&1);
      MCM2 := -2*TMPALPHA|(0&0&0&0&0&2);
      MCM3 := -2*3*TMPALPHA|(0&0&0&0&0&3);
      MCM4 := -2*3*4*TMPALPHA|(0&0&0&0&0&4);

      ALPHA0:= MCM1;
      ALPHA1:= MCM2;

      WRITE 6 '++++++++ MOMENTUM COMPACTION FACTOR ++++++++';
      WRITE 6 'MC0 = '&ST(MCM0);
      WRITE 6 'MC1 = '&ST(MCM1);
      WRITE 6 'MC2 = '&ST(MCM2);
      WRITE 6 'MC3 = '&ST(MCM3);
      WRITE 6 'MC4 = '&ST(MCM4);
      WRITE 6 '++++++++++++++++++++++++++++++++++++++++++++';

ENDPROCEDURE;

PROCEDURE INJECT NUM PSI_DEG; {at injection: SX = 0, SY, SZ = sin PSI, cos PSI}
  VARIABLE X 100; VARIABLE I 1;
  VARIABLE PSI 1; VARIABLE SY 1; VARIABLE SZ 1;
  PSI := DEG2RAD(PSI_DEG); {PSI IN RADIANS}
  X := LINSPACE(-3E-3, 3E-3, NUM);
  SY := SIN(PSI); SZ := COS(PSI);
  CR;
  SR 0 0 0 0 0 0 0 0 1; SSR 0 SY SZ;
  LOOP I 1 NUM;
    SR X|I 0 0 0 0 0 0 0 1; SSR 0 SY SZ;
    SR 0 0 X|I 0 0 0 0 0 1; SSR 0 SY SZ;
    SR 0 0 0 0 0 (X|I)/10 0 0 1; SSR 0 SY SZ;
  ENDLOOP;
ENDPROCEDURE;

PROCEDURE MAIN;

  {data-files}
  VARIABLE WHERE 500; VARIABLE MRKR 200;
  {tracking}

  VARIABLE DGAMMA 1;   {current beam y offset}
  VARIABLE NFREE 1; {number of turns to track AFTER flipping}
  VARIABLE FTR 1;   {"free"-block tracking data output scarcity control}
  VARIABLE CASE 1; {current switch case} VARIABLE PCT 1; {tracking percent}
  VARIABLE I 1; {data output counter}
  VARIABLE NTURN 1;  {number of turn for diff process}
  VARIABLE U 1;  {Acceleration Voltage, eV}
  VARIABLE m_p 1; {proton mass, eV}
  VARIABLE GAMMA 1; {equal to energy of proton}
  VARIABLE BETA 1;
  VARIABLE NTOT 1; {total turns of jump process}
  VARIABLE dQ_max 1; VARIABLE dQ_min 1; {change of quadrupole strength at jump}
  VARIABLE DELTAQ 1; {curent dQ from initial}
  VARIABLE SCALE 1; VARIABLE NSWITCH 1; {for tracking}

  VARIABLE ALPHA0 1; VARIABLE ALPHA1 1;
  VARIABLE ETA0 1; VARIABLE ETA1 1;

  {lattice}
  VARIABLE SGX 1; VARIABLE SGY 1;

  {particles}
  VARIABLE PNUM 1; {number of particles per bunch}
  VARIABLE PSI0_DEG 1; {initial SPIN tilt angle}
  VARIABLE RAYH 10000 8; VARIABLE SPIH 10000 3; {keeps RAY, SPI data after each turn}
  VARIABLE MUARR 100 4; {holds NU, NX, NY, NZ of the ray ensemble}
  {^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^}

  {Parameters at JUMP}

  PROCEDURE PUSH NTURN;
    WRITE 6 'at PUSH' NTURN;
    U := 300;
    m_p := 0.938e9;
    DGAMMA := (U/m_p);
    GAMMA := 7.08562;
    BETA := SQRT(1-1/(GAMMA*GAMMA));
    NTOT := 6225; {number of turns for jump}
    dQ_max := 0.005616;
    dQ_min := -0.00337;
    {SGX := 0.0;
    SGY := 0.0;}
    SGX := 0.3599718607904814E-001;
    SGY := -.8627374333752474E-001;

    SET_FOR_PROTONS (GAMMA+(DGAMMA*NTURN)); {acceleration 300 eV, set new beam energy}
    DELTAQ := dQ_max - ((dQ_max - dQ_min) / NTOT * NTURN); {acctual DELTAQ for turn at jump}
    WRITE 6 'dQ' DELTAQ;

    LATTICE SGX SGY 0 DELTAQ;          {recompute lattice}
    WRITE 6 'END of LATTICE';

    MCMCALC ALPHA0 ALPHA1;
    WRITE 6 'ALPHA0 = '&ST(ALPHA0);
    WRITE 6 'ALPHA1 = '&ST(ALPHA1);
    GAMMA := (GAMMA+(DGAMMA*NTURN));
    BETA := SQRT(1-1/(GAMMA*GAMMA));
    ETA0 := ALPHA0 - 1/(GAMMA*GAMMA);
    ETA1 := ALPHA1+(3/2)*(BETA*BETA)/(GAMMA*GAMMA)-6;
    WRITE 6 'ETA1 = '&ST(ETA1);

    LRAY RAYH; LSPI SPIH;              {loads RAY, SPI data after clearing}
    WRITE 6 'LOAD of PARTICLES';

    TR 1 1 -1 -3 1.1 1.1 0 0 -12;     {push one turn}
    WRITE 6 'TRACKING END';

    {WRITETBL 6 SPI   3 SF(NTURN, '(I15)');
    WRITETBL 6 RAY   6 SF(NTURN, '(I15)');
    WRITETBL 6 MUARR 4 SF(NTURN, '(I15)');}

    SRAY RAYH; WRITE 6 'SAVE ORBITAL'; {saves RAY, SPI against CR}
    SSPI SPIH; WRITE 6 'END of PUSH';
    WRITE 772 ST(NTURN)&' '&ST((GAMMA+(DGAMMA*NTURN)))&' '&ST(DELTAQ)&' '&ST(ALPHA0)&' '&ST(ALPHA1)&' '&ST(ETA0)&' '&ST(ETA1);
  ENDPROCEDURE; {PUSH}

  {^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^}
  PNUM := 10; {x 3 bunches + 1 (reference ray)}
  {********** CONTROLS **********}
  NSWITCH := 6225;
  PSI0_DEG := 45;    {align inital spin with the polarization axis for 100% initial polarization}
  {MRKR := 'JUMP';}
  MRKR := 'JUMP_SEX';
  NFREE := 1; {a small number of post-flipping turns}
  {***********************************}

  {inject particles}
  INJECT PNUM PSI0_DEG; SRAY RAYH; SSPI SPIH; {saves RAY, SPI against CR}
  WRITE 6 '^^^^ INITIAL SPIN PSI'&SF(PSI0_DEG,'(F15.7)');

  {++++++++++ PREPARING FILES FOR DATA OUTPUT ++++++++++}
  OPENF 100501 'dat/TR/'&MRKR&'/TRPSPI_'&MRKR&'.dat' 'REPLACE';
  WRITE 100501 '# number of rays:   '&SI(PNUM*3+2);      {cf. INJECT procedure (+1 for COSY's default 0-ray)}
  WRITE 100501 '# TURN PID S_X S_Y S_Z';
  WRITETBL 100501 SPI 3 SF(0, '(I15)');

  OPENF 100502 'dat/TR/'&MRKR&'/TRPRAY_'&MRKR&'.dat' 'REPLACE';
  WRITE 100502 '# number of rays:   '&SI(PNUM*3+2);
  WRITE 100502 '# TURN PID X A Y B T D';
  WRITETBL 100502 RAY 6 SF(0, '(I15)');

  OPENF 100503 'dat/TR/'&MRKR&'/TRMUARR_'&MRKR&'.dat' 'REPLACE';
  WRITE 100503 '# number of rays:   '&SI(PNUM*3+2);
  WRITE 100503 '# TURN PID NU NX NY NZ';
  OPENF 772 'dat/TR/'&MRKR&'/LATTICE.dat' 'REPLACE';
  WRITE 772 'TURN GAMMA DELTAQ ALPHA0 ALPHA1 ETA0 ETA1';
  {+++++++++++++++++++++++++++++++++++++++++++++++++++++}

  {tracking (during flipping)}
  SCALE := 100; {output data every SCALE}
  WRITE 6 SCALE NSWITCH;
  LOOP CASE 1 NSWITCH;
    WRITE 6 'CASE '&SF(CASE, '(I10)');
    PUSH CASE;
    WRITE 6 'PUSH ACCURES';
    {GET_TUNE_ENSEMBLE MUARR;}          {compute nu, nbar for the current turn} {DONT WORK???}
    IF MOD(CASE, SCALE)=0;
        WRITETBL 100501 SPI   3 SF(CASE, '(I15)');
        WRITETBL 100502 RAY   6 SF(CASE, '(I15)');
        {WRITETBL 100503 MUARR 4 SF(CASE, '(I15)');}
    ENDIF;
  ENDLOOP;

  {continue    (lattice is set the last case of the previous loop)   }
  {   tracking after flipping for awhile   }
  WRITE 6 'FREE POST-FLIP TRACKING';
  FTR := 1;             {track for NFREE turns, output data every FTR turns}
  LRAY RAYH; LSPI SPIH;              {loads RAY, SPI after previous tracking ...}
  TR FTR FTR -1 -3 1.1 1.1 0 0 -12; {track for FTR turns}
    {GET_TUNE_ENSEMBLE MUARR;          {compute nu, nbar for the current turn}} {DONT WORK???}
    WRITETBL 100501 SPI   3 SF(NSWITCH+FTR, '(I15)');  {output data}
    WRITETBL 100502 RAY   6 SF(NSWITCH+FTR, '(I15)');
    {WRITETBL 100503 MUARR 4 SF(NSWITCH+FTR, '(I15)');}
    {... saving RAY, SPI unnecessary since lattice unchanged}
ENDPROCEDURE; {MAIN}

PROCEDURE RUN;                                      {code iterates over a field of possible nbar rates-of-change}
  VARIABLE DATDIR 500; {where to output data files}
  {LATTICE ARGUMENTS}
  VARIABLE SGX 1; VARIABLE SGY 1;
  VARIABLE LATPARS 1 2; {[flat] array (SGX, SGY)}
  {********** CONTROLS **********}
  SGX := 0.0; SGY :=  0.0;
  {******************************}
  GROUTF 'img/dump/TR' 1;
  OV 3 3 0;
  TRR 1; {turn on RESUME MODE}
  DAEPS 1E-12;

  MAIN;

ENDPROCEDURE; {RUN}
RUN; END;
